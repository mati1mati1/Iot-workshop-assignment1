/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { SignalRManagementClient } from "../src/signalRManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("signalr test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let resourceName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new SignalRManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            resourceName = "mySignalRService1";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("checkname test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.signalR.checkNameAvailability(location, {
                name: resourceName,
                type: "Microsoft.SignalRService/SignalR"
            });
        });
    });
    it("signalr create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.signalR.beginCreateOrUpdateAndWait(resourceGroup, resourceName, {
                location,
                tags: { key1: "value1" },
                sku: { name: "Free_F1", capacity: 1, tier: "free" },
                kind: "SignalR",
                identity: { type: "SystemAssigned" },
                tls: {
                    clientCertEnabled: false
                },
                features: [
                    { flag: "ServiceMode", properties: {}, value: "Serverless" },
                    { flag: "EnableConnectivityLogs", properties: {}, value: "True" },
                    { flag: "EnableMessagingLogs", properties: {}, value: "False" },
                    { flag: "EnableLiveTrace", properties: {}, value: "False" }
                ],
                cors: {
                    allowedOrigins: ["*"]
                },
                serverless: { connectionTimeoutInSeconds: 30 },
                upstream: {
                    templates: []
                },
                networkACLs: {
                    defaultAction: "Deny",
                    privateEndpoints: [],
                    publicNetwork: {
                        allow: [
                            "ServerConnection",
                            "ClientConnection",
                            "RESTAPI",
                            "Trace"
                        ]
                    }
                },
                publicNetworkAccess: "Enabled",
                disableLocalAuth: false,
                disableAadAuth: false,
            }, testPollingOptions);
            assert.equal(res.name, resourceName);
        });
    });
    it("signalr get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.signalR.get(resourceGroup, resourceName);
            assert.equal(res.name, resourceName);
        });
    });
    it("signalr list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.signalR.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("signalr delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.signalR.beginDeleteAndWait(resourceGroup, resourceName);
            try {
                for (var _b = __asyncValues(client.signalR.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=signalr_examples.spec.js.map